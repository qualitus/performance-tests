<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ILIAS Performance Testsuite" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global Testsuite Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(PROTOCOL,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(HOST,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">${__P(PATH,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">${__P(PORT,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_ID" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_ID</stringProp>
            <stringProp name="Argument.value">${__P(CLIENT_ID,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">${__P(THREADS,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP</stringProp>
            <stringProp name="Argument.value">${__P(RAMP_UP,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPS" elementType="Argument">
            <stringProp name="Argument.name">LOOPS</stringProp>
            <stringProp name="Argument.value">${__P(LOOPS,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WORK_DIR" elementType="Argument">
            <stringProp name="Argument.name">WORK_DIR</stringProp>
            <stringProp name="Argument.value">${__P(WORK_DIR,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CREDENTIALS_CSV" elementType="Argument">
            <stringProp name="Argument.name">CREDENTIALS_CSV</stringProp>
            <stringProp name="Argument.value">${__P(CREDENTIALS_CSV,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IS_ADMIN" elementType="Argument">
            <stringProp name="Argument.name">IS_ADMIN</stringProp>
            <stringProp name="Argument.value">${__P(IS_ADMIN,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">import from properties - always default to &apos;#NV&apos; if not supplied</stringProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ILIAS Login Credentials" enabled="true">
        <stringProp name="filename">${CREDENTIALS_CSV}</stringProp>
        <stringProp name="fileEncoding">utf8</stringProp>
        <stringProp name="variableNames">USERNAME,PASSWORD</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
        <stringProp name="HTTPSampler.port">${PORT}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">${PATH}</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Startup" enabled="true">
        <stringProp name="TestPlan.comments">stop after any error</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1451388741000</longProp>
        <longProp name="ThreadGroup.end_time">1451388741000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Assert Imported Variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PROTOCOL" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="488764481">(?!#NV)https|http</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">http, https</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">PROTOCOL</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="HOST" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2132376987">(?!#NV)[a-z0-9.]+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">domain or ip, e.g. www.ilias.de, localhost, 127.0.0.1</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">HOST</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PATH" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324860">(?!#NV).*</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">may be empty - e.g. /path/to/ilias, /docu, /test51, ..</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">PATH</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PORT" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">digit</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">PORT</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CLIENT_ID" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324859">(?!#NV).+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">may not be empty or null [equals not &quot;&quot; fails for null, i.e. yields true]</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">CLIENT_ID</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="THREADS" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">digit</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">THREADS</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="RAMP_UP" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">digit</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">RAMP_UP</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="LOOPS" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">LOOPS</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="WORK_DIR" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324859">(?!#NV).+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">may not be empty or null [equals not &quot;&quot; fails for null, i.e. yields true]</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">WORK_DIR</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CREDENTIALS_CSV" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324859">(?!#NV).+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">may not be empty or null [must use regex, because &quot;Not&quot; is buggy for null values, i.e. &quot;must not equal ``&quot; yields true for null]</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">CREDENTIALS_CSV</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="IS_ADMIN" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="412828714">true|TRUE|false|FALSE</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">IS_ADMIN</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Run Testplan" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP}</stringProp>
        <longProp name="ThreadGroup.start_time">1450856806000</longProp>
        <longProp name="ThreadGroup.end_time">1450856806000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TEST Login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/login.php?client_id=${CLIENT_ID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginAction" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetLoginAction</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin]</stringProp>
              <stringProp name="HtmlExtractor.attribute">action</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginUsername" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetLoginUsername</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] #username</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginPassword" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetLoginPassword</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] #password</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetlLoginSubmit" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetLoginSubmit</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] input[type=submit]</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginSubmitV" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetLoginSubmitV</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] input[type=submit]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginAction" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetLoginAction</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginUsername" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetLoginUsername</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginPassword" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetLoginPassword</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginSubmit" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetLoginSubmit</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginSubmitV" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetLoginSubmitV</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="${ilGetLoginUsername}" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${USERNAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">${ilGetLoginUsername}</stringProp>
                </elementProp>
                <elementProp name="${ilGetLoginPassword}" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">${ilGetLoginPassword}</stringProp>
                </elementProp>
                <elementProp name="${ilGetLoginSubmit}" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ilGetLoginSubmitV}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">${ilGetLoginSubmit}</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/${ilGetLoginAction}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="ON ERROR: Start Next Iteration" enabled="true">
              <intProp name="OnError.action">4</intProp>
            </ResultAction>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostLoginAction" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilPostLoginAction</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin]</stringProp>
              <stringProp name="HtmlExtractor.attribute">action</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostLoginAction" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilPostLoginAction</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Repository" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repository" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php?target=root_1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbUrl</stringProp>
              <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
              <stringProp name="HtmlExtractor.attribute">href</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbContent</stringProp>
              <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-167724106">/images/icon_root.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetRepositoryHeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1449016747">ilias\.php\?ref\_id\=1\&amp;cmd\=frameset\&amp;cmdClass\=ilrepositorygui\&amp;cmdNode\=[^&amp;]*\&amp;baseClass\=ilRepositoryGUI1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbUrl</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2240617">${ilGetRepositoryHeaderContent}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbContent</stringProp>
              <stringProp name="TestPlan.comments">sanity check, that we picked the right breadcrumb (must match the header)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-856324859">(?!#NV).+</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetRepositoryHeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Desktop" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Selected Items" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php?baseClass=ilPersonalDesktopGUI&amp;cmd=jumpToSelectedItems#</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetSelectedItemsBlHead" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetSelectedItemsBlHead</stringProp>
              <stringProp name="HtmlExtractor.expr">a#block_pditems_0_blhead.ilAccAnchor</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetSelectedItemsBlHead" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1518881310">block_pditems_0_blhead</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetSelectedItemsBlHead</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mail" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php?baseClass=ilMailGUI</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetMailHeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetMailHeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetMailHeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-11153909">/images/icon_mail.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetMailHeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF Admin" enabled="true">
          <stringProp name="IfController.condition">${IS_ADMIN}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TEST Manage Repository" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">some CRUD operations with categories</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repository" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/goto.php?target=root_1</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderImage" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderImage</stringProp>
                <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                <stringProp name="HtmlExtractor.attribute">src</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbUrl</stringProp>
                <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbContent</stringProp>
                <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
                <stringProp name="HtmlExtractor.attribute"></stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderContent" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderContent</stringProp>
                <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
                <stringProp name="HtmlExtractor.attribute"></stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryNewCat" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetRepositoryNewCat</stringProp>
                <stringProp name="HtmlExtractor.expr">div.ilNewObjectSelector a#cat</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderImage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-167724106">/images/icon_root.svg</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetRepositoryHeaderImage</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1449016747">ilias\.php\?ref\_id\=1\&amp;cmd\=frameset\&amp;cmdClass\=ilrepositorygui\&amp;cmdNode\=[^&amp;]*\&amp;baseClass\=ilRepositoryGUI1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbUrl</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2240617">${ilGetRepositoryHeaderContent}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbContent</stringProp>
                <stringProp name="TestPlan.comments">sanity check, that we picked the right breadcrumb (must match the header)</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderContent" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-856324859">(?!#NV).+</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetRepositoryHeaderContent</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryNewCat" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1649786606">ilias\.php\?.+</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetRepositoryNewCat</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="ITERATIONS" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1266493130">ITERATIONS</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="85959">
                  <stringProp name="51">3</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="${ITERATIONS}x New Category (nested)" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${ITERATIONS}</stringProp>
            </LoopController>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="NewCategoryAction" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">NewCategoryAction = vars.get(&quot;ilPostNewCategoryNewCat&quot;);

if (NewCategoryAction == null || NewCategoryAction == &quot;#NV&quot;) {
	NewCategoryAction = vars.get(&quot;ilGetRepositoryNewCat&quot;);
}

vars.put(&quot;NewCategoryAction&quot;, NewCategoryAction);</stringProp>
                <stringProp name="scriptLanguage">jexl</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET NewCategory" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/${NewCategoryAction}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryAction" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryAction</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_</stringProp>
                  <stringProp name="HtmlExtractor.attribute">action</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryTitle" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryTitle</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ input#title</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryDescription" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryDescription</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ textarea#desc</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmit" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmit</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmitV" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmitV</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryAction" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryAction</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryTitle" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryTitle</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryDescription" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryDescription</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmit" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategorySubmit</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmitV" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategorySubmitV</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST NewCategory" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="${ilGetNewCategoryTitle}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__samplerName} @ ${__time(Y-M-D_H:M:S)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategoryTitle}</stringProp>
                    </elementProp>
                    <elementProp name="${ilGetNewCategoryDescription}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">created by jmeter testplan ${__TestPlanName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategoryDescription}</stringProp>
                    </elementProp>
                    <elementProp name="${ilGetNewCategorySubmit}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ilGetNewCategorySubmitV}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategorySubmit}</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/${ilGetNewCategoryAction}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="FatalError" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">FatalError</stringProp>
                  <stringProp name="RegexExtractor.regex">\&lt;b\&gt;Fatal error\&lt;\/b\&gt;\:\s*(.*)\&lt;br \/\&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">#NV</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryHeaderImage" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilPostNewCategoryHeaderImage</stringProp>
                  <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                  <stringProp name="HtmlExtractor.attribute">src</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryNewCat" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilPostNewCategoryNewCat</stringProp>
                  <stringProp name="HtmlExtractor.expr">div.ilNewObjectSelector a#cat</stringProp>
                  <stringProp name="HtmlExtractor.attribute">href</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="FatalError" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">FatalError</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryHeaderImage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1524009938">/images/icon_cat.svg</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilPostNewCategoryHeaderImage</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryNewCat" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1649786606">ilias\.php\?.+</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilPostNewCategoryNewCat</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="not error.php" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="845794093">.*\/error\.php</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.sample_label</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="On Error Start Next Thread Loop" enabled="true">
                <intProp name="OnError.action">4</intProp>
              </ResultAction>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="${ITERATIONS}x Delete Category (nested)" enabled="false">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${ITERATIONS}</stringProp>
            </LoopController>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="NewCategoryAction" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">NewCategoryAction = vars.get(&quot;ilPostNewCategoryNewCat&quot;);

if (NewCategoryAction == null || NewCategoryAction == &quot;#NV&quot;) {
	NewCategoryAction = vars.get(&quot;ilGetRepositoryNewCat&quot;);
}

vars.put(&quot;NewCategoryAction&quot;, NewCategoryAction);</stringProp>
                <stringProp name="scriptLanguage">jexl</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET DelCategory" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/${DelCategoryAction}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryAction" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryAction</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_</stringProp>
                  <stringProp name="HtmlExtractor.attribute">action</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryTitle" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryTitle</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ input#title</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryDescription" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryDescription</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ textarea#desc</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmit" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmit</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmitV" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmitV</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryAction" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryAction</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryTitle" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryTitle</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryDescription" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryDescription</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmit" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategorySubmit</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmitV" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategorySubmitV</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST DelCategory" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="${ilGetNewCategoryTitle}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__samplerName} @ ${__time(Y-M-D_H:M:S)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategoryTitle}</stringProp>
                    </elementProp>
                    <elementProp name="${ilGetNewCategoryDescription}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">created by jmeter testplan ${__TestPlanName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategoryDescription}</stringProp>
                    </elementProp>
                    <elementProp name="${ilGetNewCategorySubmit}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ilGetNewCategorySubmitV}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategorySubmit}</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/${ilGetNewCategoryAction}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="FatalError" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">FatalError</stringProp>
                  <stringProp name="RegexExtractor.regex">\&lt;b\&gt;Fatal error\&lt;\/b\&gt;\:\s*(.*)\&lt;br \/\&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">#NV</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryHeaderImage" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilPostNewCategoryHeaderImage</stringProp>
                  <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                  <stringProp name="HtmlExtractor.attribute">src</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryNewCat" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilPostNewCategoryNewCat</stringProp>
                  <stringProp name="HtmlExtractor.expr">div.ilNewObjectSelector a#cat</stringProp>
                  <stringProp name="HtmlExtractor.attribute">href</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="FatalError" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">FatalError</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryHeaderImage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1524009938">/images/icon_cat.svg</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilPostNewCategoryHeaderImage</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryNewCat" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1649786606">ilias\.php\?.+</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilPostNewCategoryNewCat</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="not error.php" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="845794093">.*\/error\.php</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.sample_label</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="On Error Start Next Thread Loop" enabled="true">
                <intProp name="OnError.action">4</intProp>
              </ResultAction>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Sleep" enabled="true">
                <stringProp name="ConstantTimer.delay">10</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Logout" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}/logout.php?lang=en</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">We set the language to &apos;en&apos; to be able to interpret the result</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLogoutHeader" enabled="true">
            <stringProp name="HtmlExtractor.refname">ilGetLogoutHeader</stringProp>
            <stringProp name="HtmlExtractor.expr">.il_Header h1</stringProp>
            <stringProp name="HtmlExtractor.attribute"></stringProp>
            <stringProp name="HtmlExtractor.default">#NV</stringProp>
            <stringProp name="HtmlExtractor.match_number"></stringProp>
            <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
          </HtmlExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLogoutHeader" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2013462102">Logout</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">ilGetLogoutHeader</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="DEBUG: Snapshot Variables" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="DEBUG: Inspect Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>false</label>
            <code>true</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <url>true</url>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="TestPlan.comments">temporarily place this beneath any element you want to inspect</stringProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="DEV: Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename">${OUT_DIR}/results_.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="DEBUG: Snapshot Sampler (post run)" enabled="true">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySamplerProperties">true</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
      </DebugPostProcessor>
      <hashTree/>
      <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="DEBUG: Snapshot Variables" enabled="true">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
      </DebugSampler>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="DEBUG: Inspect Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>false</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="TestPlan.comments">temporarily place this beneath any element you want to inspect</stringProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="DEBUG: Inspect Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>false</label>
            <code>true</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <url>true</url>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="TestPlan.comments">temporarily place this beneath any element you want to inspect</stringProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="DEBUG: Display Properties" enabled="true"/>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
